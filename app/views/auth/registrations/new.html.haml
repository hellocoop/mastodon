- content_for :page_title do
  = t('auth.register')

- content_for :header_tags do
  = render partial: 'shared/og', locals: { description: description_for_sign_up }

= simple_form_for(resource, as: resource_name, url: user_openid_connect_omniauth_authorize_path, html: { novalidate: false }) do |f|
  %h1.title.-mt-8= 'Welcome to verified.coop!'
  %p.sublead= 'Verified.coop is a Mastodon instance for people that want a community where everyone uses their real identity. We have found real identities lead to more civil discussions.'
  %p.lead= 'Verified.coop is operated as a public benefit by hello.coop, a cooperative with a mission to to give people control of their identity.'

  = render 'shared/error_messages', object: resource

  - if @invite.present? && @invite.autofollow?
    .fields-group.invited-by
      %p.hint= t('invites.invited_by')
      = render 'application/card', account: @invite.user.account

  %h1.title= t('auth.rules.title')
  %p.sublead= t('auth.rules.preamble')

  %ol.rules-list
    - @rules.each do |rule|
      %li.counter-width-roundness-modifier
        .rules-list__text= rule.text

  %h1.title= t('auth.sign_up.title')
  %p.sublead= 'To use verified.coop:'
  %ol.rules-list
    %li
      .rules-list__text= 'Verify your identity on three services'
    %li
      .rules-list__text= 'Use a name you use on two services'
    %li
      .rules-list__text= 'Select a username you already use'
  %p.sublead.-mt-4= 'Your Mastodon identifier will be @username@verified.coop'

  - if approved_registrations? && !@invite.present?
    .fields-group
      = f.simple_fields_for :invite_request, resource.invite_request || resource.build_invite_request do |invite_request_fields|
        = invite_request_fields.input :text, as: :text, wrapper: :with_block_label, required: Setting.require_invite_text


  = hidden_field_tag :accept, params[:accept]
  = f.input :invite_code, as: :hidden

  .actions
    = f.button :button, raw('ō&nbsp;&nbsp;&nbsp;Continue with Hellō'), type: :submit

  -# .stacked-actions
  -#   - accept_path = @invite_code.present? ? public_invite_url(invite_code: @invite_code, accept: @accept_token) : new_user_registration_path(accept: @accept_token)
  -#   = link_to t('auth.rules.accept'), accept_path, class: 'button'
  -#   = link_to t('auth.rules.back'), root_path, class: 'button button-tertiary'

.form-footer= render 'auth/shared/links'
